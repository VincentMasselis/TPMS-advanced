import com.masselis.tpmsadvanced.data.vehicle.model.Pressure;
import com.masselis.tpmsadvanced.data.vehicle.model.Vehicle;
import com.masselis.tpmsadvanced.data.vehicle.model.Temperature;
import java.util.UUID;
import kotlin.Boolean;
import kotlin.Int;
import kotlin.UShort;

CREATE TABLE Tyre(
    id INTEGER AS Int NOT NULL,
    timestamp REAL NOT NULL,
    rssi INTEGER AS Int NOT NULL,
    location INTEGER AS Vehicle.Kind.Location NOT NULL,
    pressure REAL AS Pressure NOT NULL,
    temperature REAL AS Temperature NOT NULL,
    battery INTEGER AS UShort NOT NULL,
    isAlarm INTEGER AS Boolean NOT NULL,
    vehicleId TEXT AS UUID NOT NULL,
    FOREIGN KEY(vehicleId) REFERENCES Vehicle(uuid) ON DELETE CASCADE,
    UNIQUE(location, vehicleId)
);

insert:
INSERT INTO Tyre (id, timestamp, rssi, location, pressure, temperature, battery, isAlarm, vehicleId) VALUES (?, ?,?, ?, ?, ?, ?, ?, ?)
ON CONFLICT (location, vehicleId) DO
UPDATE SET timestamp=excluded.timestamp, rssi=excluded.rssi, pressure=excluded.pressure,
  temperature=excluded.temperature, battery=excluded.battery, isAlarm=excluded.isAlarm;

selectListByVehicle:
SELECT Tyre.id, Tyre.timestamp, Tyre.rssi, Tyre.location, Tyre.pressure, Tyre.temperature, Tyre.battery, Tyre.isAlarm
FROM Tyre WHERE Tyre.vehicleId = ?;

latestByTyreLocationByVehicle:
SELECT Tyre.id, Tyre.timestamp, Tyre.rssi, Tyre.location, Tyre.pressure, Tyre.temperature, Tyre.battery, Tyre.isAlarm FROM Tyre
INNER JOIN Vehicle ON Tyre.vehicleId = Vehicle.uuid
WHERE location = ? AND Vehicle.uuid = ?
ORDER BY timestamp DESC
LIMIT 1;