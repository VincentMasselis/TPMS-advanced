import com.masselis.tpmsadvanced.data.record.model.SensorLocation;
import java.util.UUID;
import kotlin.Int;

CREATE TABLE Sensor(
    id INTEGER AS Int NOT NULL PRIMARY KEY,
    location INTEGER AS SensorLocation NOT NULL,
    carId TEXT AS UUID NOT NULL,
    FOREIGN KEY(carId) REFERENCES Car(uuid) ON DELETE CASCADE,
    UNIQUE(location, carId)
);

upsert:
INSERT INTO Sensor (id, location, carId)
VALUES (?, ?, ?)
ON CONFLICT(id) DO
UPDATE SET location=excluded.location, carId=excluded.carId;

updateCarId:
UPDATE Sensor SET carId = ? WHERE id = ?;

delete:
DELETE FROM Sensor WHERE id = ?;

deleteByCar:
DELETE FROM Sensor WHERE rowid IN (
    SELECT Sensor.rowid FROM Sensor
    INNER JOIN Car ON Sensor.carId = Car.uuid
    WHERE Car.uuid = ?
);

selectByCarAndLocation:
SELECT Sensor.* FROM Sensor
INNER JOIN Car ON Sensor.carId = Car.uuid
WHERE Car.uuid = ? AND location = ?;

countByCar:
SELECT COUNT(Sensor.rowid) FROM Sensor
INNER JOIN Car ON Sensor.carId = Car.uuid
WHERE Car.uuid = ?;