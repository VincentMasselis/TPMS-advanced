import com.masselis.tpmsadvanced.data.record.model.SensorLocation;
import java.util.UUID;
import kotlin.Int;

CREATE TABLE Sensor(
    id INTEGER AS Int NOT NULL PRIMARY KEY,
    location INTEGER AS SensorLocation NOT NULL,
    vehicleId TEXT AS UUID NOT NULL,
    FOREIGN KEY(vehicleId) REFERENCES Vehicle(uuid) ON DELETE CASCADE,
    UNIQUE(location, vehicleId)
);

upsert:
INSERT INTO Sensor (id, location, vehicleId)
VALUES (?, ?, ?)
ON CONFLICT(id) DO
UPDATE SET location=excluded.location, vehicleId=excluded.vehicleId;

updateVehicleId:
UPDATE Sensor SET vehicleId = ? WHERE id = ?;

delete:
DELETE FROM Sensor WHERE id = ?;

deleteByVehicle:
DELETE FROM Sensor WHERE rowid IN (
    SELECT Sensor.rowid FROM Sensor
    INNER JOIN Vehicle ON Sensor.vehicleId = Vehicle.uuid
    WHERE Vehicle.uuid = ?
);

selectByVehicleAndLocation:
SELECT Sensor.* FROM Sensor
INNER JOIN Vehicle ON Sensor.vehicleId = Vehicle.uuid
WHERE Vehicle.uuid = ? AND location = ?;

countByVehicle:
SELECT COUNT(Sensor.rowid) FROM Sensor
INNER JOIN Vehicle ON Sensor.vehicleId = Vehicle.uuid
WHERE Vehicle.uuid = ?;