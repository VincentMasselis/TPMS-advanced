import com.masselis.tpmsadvanced.data.record.model.Pressure;
import com.masselis.tpmsadvanced.data.record.model.Temperature;
import java.util.UUID;
import kotlin.Boolean;

CREATE TABLE Car(
    uuid TEXT AS UUID NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    isFavourite INTEGER AS Boolean NOT NULL,
    lowPressure REAL AS Pressure NOT NULL DEFAULT 100,
    highPressure REAL AS Pressure NOT NULL DEFAULT 300,
    lowTemp REAL AS Temperature NOT NULL DEFAULT 20,
    normalTemp REAL AS Temperature NOT NULL DEFAULT 45,
    highTemp REAL AS Temperature NOT NULL DEFAULT 90
);

-- This sucession of triggers ensure there is always exactly 1 car with isFavourite set to 1

CREATE TRIGGER IF NOT EXISTS new_favourite_insert
    AFTER INSERT ON Car
    WHEN new.isFavourite = 1
BEGIN
    UPDATE Car SET isFavourite = 0 WHERE isFavourite = 1 AND uuid != new.uuid;
END;

CREATE TRIGGER IF NOT EXISTS new_favourite_update
    AFTER UPDATE OF isFavourite
    ON Car
    WHEN new.isFavourite = 1
BEGIN
    UPDATE Car SET isFavourite = 0 WHERE isFavourite = 1 AND uuid != new.uuid;
END;

CREATE TRIGGER IF NOT EXISTS no_favourite_update
    AFTER UPDATE OF isFavourite
    ON Car
    WHEN (SELECT COUNT(*) FROM Car WHERE isFavourite = 1) = 0
BEGIN
    UPDATE Car SET isFavourite = 1 WHERE rowid IN (SELECT rowid FROM Car LIMIT 1);
END;

CREATE TRIGGER IF NOT EXISTS no_car_delete
    BEFORE DELETE
    ON Car
    WHEN (SELECT COUNT(*) FROM Car) = 1
BEGIN
    SELECT RAISE(IGNORE);
END;

CREATE TRIGGER IF NOT EXISTS no_favourite_delete
    AFTER DELETE
    ON Car
    WHEN old.isFavourite = 1
BEGIN
    UPDATE Car SET isFavourite = 1 WHERE rowid IN (SELECT rowid FROM Car LIMIT 1);
END;

-- This statement is put in the end because SQLDelight executes the triggers before the statements

INSERT INTO Car(uuid, name, isFavourite) VALUES ("466b2e13-e33a-4adf-a101-a920140a29a1","My car",1);

insert:
INSERT INTO Car(uuid, name, isFavourite) VALUES (?,?,?);

selectLowPressureByCarId:
SELECT lowPressure FROM Car WHERE uuid = ?;

updateLowPressure:
UPDATE Car SET lowPressure = ? WHERE uuid = ?;

selectHighPressureByCarId:
SELECT highPressure FROM Car WHERE uuid = ?;

updateHighPressure:
UPDATE Car SET highPressure = ? WHERE uuid = ?;

selectLowTempByCarId:
SELECT lowTemp FROM Car WHERE uuid = ?;

updateLowTemp:
UPDATE Car SET lowTemp = ? WHERE uuid = ?;

selectNormalTempByCarId:
SELECT normalTemp FROM Car WHERE uuid = ?;

updateNormalTemp:
UPDATE Car SET normalTemp = ? WHERE uuid = ?;

selectHighTempByCarId:
SELECT highTemp FROM Car WHERE uuid = ?;

updateHighTemp:
UPDATE Car SET highTemp = ? WHERE uuid = ?;

delete:
DELETE FROM Car WHERE uuid = ?;

setAsFavourite:
UPDATE Car SET isFavourite = ? WHERE uuid = ?;

currentFavourite:
SELECT * FROM Car WHERE isFavourite = 1;

selectAll:
SELECT * FROM Car;

selectByUuid:
SELECT * FROM Car WHERE uuid = ?;

selectBySensorId:
SELECT Car.* FROM Car
INNER JOIN Sensor ON Sensor.carId = Car.uuid
WHERE Sensor.id = ?;