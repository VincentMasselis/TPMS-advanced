plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'org.jetbrains.kotlin.kapt'
}

if (isDecrypted) {
    // Needs the google-services.json file to work
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'

    // Needs the publisher-service-account.json file to work
    apply plugin: 'com.github.triplet.play'
    play {
        serviceAccountCredentials.set(file("../../secrets/publisher-service-account.json"))
        defaultToAppBundles.set(true)
        track.set("beta")
        // Keep the strategy AUTO to continue generating "available-version-codes.txt" files
        resolutionStrategy = com.github.triplet.gradle.androidpublisher.ResolutionStrategy.AUTO
        fromTrack.set("beta")
        promoteTrack.set("production")
    }
}

android {
    defaultConfig {
        applicationId "com.masselis.tpmsadvanced"
        versionCode tpmsAdvancedVersionCode()
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        if (isDecrypted)
            release {
                keyAlias APP_KEY_ALIAS
                keyPassword APP_KEY_STORE_PWD
                storeFile file(APP_KEYSTORE_LOCATION)
                storePassword APP_KEY_STORE_PWD
            }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.findByName('release') ?: signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "$composeCompilerVersion"
    }
}

dependencies {
    implementation(project(":core:common"))
    implementation(project(":core:ui"))
    implementation(project(":feature:core"))
    implementation(project(":feature:qrcode"))
    implementation(project(":core:debug-ui"))

    testImplementation(project(":core:test"))
    androidTestImplementation(project(":core:android-test"))
}

tasks.whenTaskAdded { instrumentedTestTask ->
    if (instrumentedTestTask.name == "connectedDemoDebugAndroidTest") {
        task adbRoot(type: Exec) {
            commandLine 'adb', 'root'
            ignoreExitValue true
        }
        task clearScreenshotPhoneFolder(type: Exec) {
            dependsOn adbRoot
            group = 'publishing'
            instrumentedTestTask.dependsOn clearScreenshotPhoneFolder
            commandLine 'adb', 'shell', 'rm -rf /sdcard/Pictures/screenshots'
        }
        task downloadScreenshots(type: Exec) {
            dependsOn adbRoot
            dependsOn instrumentedTestTask
            group = 'publishing'
            doFirst {
                delete layout.buildDirectory.dir("screenshots")
                mkdir layout.buildDirectory.dir("screenshots")
            }
            commandLine 'adb', 'pull', '/sdcard/Pictures/screenshots', "$buildDir"
        }
        task copyScreenshot(type: Copy) {
            dependsOn downloadScreenshots
            group = 'publishing'
            def path = "$projectDir/src/normal/play/listings/en-US/graphics/phone-screenshots"
            doFirst {
                mkdir path
            }
            from layout.buildDirectory.dir("screenshots")
            into path
            rename { filename ->
                if (filename.startsWith("light_main"))
                    return "1.png"
                else if (filename.startsWith("light_settings"))
                    return "2.png"
                else if (filename.startsWith("dark_main"))
                    return "3.png"
                else if (filename.startsWith("dark_settings"))
                    return "4.png"
                else
                    throw IllegalArgumentException(filename)
            }
        }
        if (isDecrypted)
            publishListing.dependsOn copyScreenshot
    }
}
tasks.whenTaskAdded { processVersionCodes ->
    if (processVersionCodes.name == "processNormalReleaseVersionCodes") {
        task compareLocalVersionCodeWithPlayStore {
            dependsOn processVersionCodes
            group = 'publishing'
            description = 'Ensure the artifact to be promoted by promoteArtifact will be generated from the current commit'
            doLast {
                def playStoreVc = file("$buildDir/intermediates/gpp/normalRelease/available-version-codes.txt").text.toInteger() - 1
                assert playStoreVc == tpmsAdvancedVersionCode()
            }
        }
        promoteArtifact.dependsOn compareLocalVersionCodeWithPlayStore
    }
}
