name: Run on emulator
description: Starts the emulator and run the filled script
inputs:
  script:
    description: Script to run once the emulator is ready
    required: true
runs:
  using: "composite"
  steps:
    - name: Gradle cache
      uses: gradle/gradle-build-action@v2

    - name: AVD cache
      uses: actions/cache@v3
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-cache

    - name: Install tools
      shell: bash
      run: |
        #!/usr/bin/env bash

        brew install intel-haxm android-commandlinetools android-platform-tools
        
        # Install AVD files
        echo "y" | sdkmanager --install 'system-images;android-27;default;x86_64'

    - name: Creates the emulator if not exists and create AVD cache
      if: steps.avd-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        #!/usr/bin/env bash
        
        brew install telnet
        
        # Create emulator
        echo "no" | avdmanager --verbose create avd --name android_emulator -d 19 --package 'system-images;android-27;default;x86_64'
        
        # list emulator
        echo "Available emulator"
        $ANDROID_HOME/emulator/emulator -list-avds

        if false; then
        emulator_config=~/.android/avd/android_emulator.avd/config.ini
        # The following is to support empty OR populated config.ini files,
        # the state of which is dependant on the version of the emulator used (which we don't control),
        # Replace existing config (NOTE we're on MacOS so sed works differently!)
        sed -i .bak 's/hw.lcd.density=.*/hw.lcd.density=420/' "$emulator_config"
        sed -i .bak 's/hw.lcd.height=.*/hw.lcd.height=1920/' "$emulator_config"
        sed -i .bak 's/hw.lcd.width=.*/hw.lcd.width=1080/' "$emulator_config"
        # Or, add new config
        if ! grep -q "hw.lcd.density" "$emulator_config"; then
        echo "hw.lcd.density=420" >> "$emulator_config"
        fi
        if ! grep -q "hw.lcd.height" "$emulator_config"; then
        echo "hw.lcd.height=1920" >> "$emulator_config"
        fi
        if ! grep -q "hw.lcd.width" "$emulator_config"; then
        echo "hw.lcd.width=1080" >> "$emulator_config"
        fi
        echo "Emulator settings ($emulator_config)"
        cat "$emulator_config"
        fi
      
        echo "Starting emulator and create cache"

        # Start emulator in background and saves the state to speed up future boots
        nohup $ANDROID_HOME/emulator/emulator -avd android_emulator -no-audio -gpu host -no-boot-anim -qemu -m 2048 > /dev/null 2>&1 &
        adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'

        #list online device/emulator
        adb devices

        echo "Emulator cache initialized, let's stop it"
        token=`cat ~/.emulator_console_auth_token`
        { echo "auth $token"; echo "kill"; echo "exit"; sleep 30; } | telnet localhost 5554 || true 
        
        while adb devices | grep -q 'emulator'; do
          echo "Device is still available through ADB"
          adb devices
        
          token=`cat ~/.emulator_console_auth_token`
          { echo "auth $token"; echo "kill"; echo "exit"; sleep 30; } | telnet localhost 5554 || true 
        
          adb kill-server 
          sleep 5
        done
  
        echo "Check if device was correctly killed"
        adb devices

    - name: Starts the emulator
      shell: bash
      run: |
        #!/usr/bin/env bash
        
        echo "Starting emulator from cache"

        # Start emulator in background, state isn't saved since there is already one in cache 
        nohup $ANDROID_HOME/emulator/emulator -avd android_emulator -no-snapshot-save -no-audio -gpu host -no-boot-anim -qemu -m 2048 > /dev/null 2>&1 &
        adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'

        #list online device/emulator
        adb devices

        echo "Emulator started"

    - name: Run filled script
      shell: bash
      run: |
        #!/usr/bin/env bash
        
        ${{ inputs.script }}
