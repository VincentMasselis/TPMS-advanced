
import com.android.build.gradle.BaseExtension
import com.android.build.gradle.BasePlugin
import org.gradle.api.Action
import org.gradle.api.JavaVersion.VERSION_17
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.kotlin.dsl.apply
import org.gradle.kotlin.dsl.configure
import org.jetbrains.kotlin.gradle.dsl.KotlinAndroidExtension

public class AndroidCommonPlugin : Plugin<Project> {
    override fun apply(target: Project): Unit = with(target) {
        apply<BasePlugin>()
        plugins.apply("org.jetbrains.kotlin.android")
        plugins.apply("org.jetbrains.kotlin.plugin.parcelize")

// `android {}` is unavailable since I only use the plugin com.android.base
        @Suppress("UnstableApiUsage")
        configure<BaseExtension> android@{
            compileSdkVersion(libs.versions.sdk.compile.map { it.toInt() }.get())
            defaultConfig {
                minSdk = libs.versions.sdk.min.map { it.toInt() }.get()
                targetSdk = libs.versions.sdk.target.map { it.toInt() }.get()

                testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
                // `useTestStorageService` enables the ability to store files when capturing screenshots.
                // `clearPackageData` makes the Android Test Orchestrator run its "pm clear" command after
                // each test invocation. This command ensures that the app's state is completely cleared
                // between tests.
                testInstrumentationRunnerArguments += mapOf(
                    "useTestStorageService" to "true",
                    "clearPackageData" to "true"
                )
                testOptions.execution = "ANDROIDX_TEST_ORCHESTRATOR"
            }
            compileOptions {
                // Using sdk 34 allow the usage of Java 17 compatibility
                // Check https://developer.android.com/build/jdks#compileSdk
                // `sourceCompatibility` is only for Java classes generated by Dagger
                sourceCompatibility = VERSION_17
                targetCompatibility = VERSION_17
            }
            flavorDimensions("mode")
            productFlavors {
                val demo = create("demo") {
                    dimension = "mode"
                }
                create("normal") {
                    dimension = "mode"
                }
                variantFilter = Action {
                    if (flavors.any { it.name == demo.name } && buildType.name == "release")
                        ignore = true
                }
            }
            packagingOptions {
                resources.excludes += setOf(
                    "META-INF/DEPENDENCIES",
                    "META-INF/LICENSE",
                    "META-INF/LICENSE.txt",
                    "META-INF/LICENSE.md",
                    "META-INF/LICENSE-notice.md",
                    "META-INF/license.txt",
                    "META-INF/NOTICE",
                    "META-INF/NOTICE.txt",
                    "META-INF/notice.txt",
                    "META-INF/ASL2.0",
                    "META-INF/*.kotlin_module",
                )
            }

            testOptions {
                emulatorControl {
                    enable = true
                }
            }
        }

        // Does the same than `android.kotlinOptions {}`
        configure<KotlinAndroidExtension> {
            // See https://developer.android.com/build/jdks#toolchain
            jvmToolchain(17)
            compilerOptions {
                // No need to set `jvmTarget`, it uses `jvmToolchain` by default
                freeCompilerArgs.addAll(
                    "-Xexplicit-api=strict",
                    "-opt-in=kotlin.RequiresOptIn",
                    "-Xcontext-parameters",
                )
            }
        }
    }
}
