import com.android.build.gradle.BaseExtension
import com.android.build.gradle.internal.tasks.DeviceProviderInstrumentTestTask
import com.masselis.tpmsadvanced.emulator.EmulatorPlugin
import org.gradle.api.JavaVersion.VERSION_17

plugins {
    com.android.base
    kotlin("android")
}

// `android {}` is unavailable since I only use the plugin com.android.base
@Suppress("UnstableApiUsage")
configure<BaseExtension> android@{
    compileSdkVersion(libs.versions.sdk.compile.map { it.toInt() }.get())
    defaultConfig {
        minSdk = libs.versions.sdk.min.map { it.toInt() }.get()
        targetSdk = libs.versions.sdk.target.map { it.toInt() }.get()
        buildToolsVersion(libs.versions.build.tool.get())

        ndk {
            // Removes the abi "riscv64" to avoid issues when uploading to the play store
            // https://github.com/VincentMasselis/TPMS-advanced/actions/runs/10966842365/job/30455519697
            abiFilters += listOf("armeabi-v7a", "arm64-v8a", "x86", "x86_64")
        }

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        // `useTestStorageService` enables the ability to store files when capturing screenshots.
        // `clearPackageData` makes the Android Test Orchestrator run its "pm clear" command after
        // each test invocation. This command ensures that the app's state is completely cleared
        // between tests.
        testInstrumentationRunnerArguments += mapOf(
            "useTestStorageService" to "true",
            "clearPackageData" to "true"
        )
        testOptions.execution = "ANDROIDX_TEST_ORCHESTRATOR"
    }
    compileOptions {
        // Using sdk 34 allow the usage of Java 17 compatibility
        // Check https://developer.android.com/build/jdks#compileSdk
        // `sourceCompatibility` is only for Java classes generated by Dagger
        sourceCompatibility = VERSION_17
        targetCompatibility = VERSION_17
    }
    flavorDimensions("mode")
    productFlavors {
        val demo by creating {
            dimension = "mode"
        }
        create("normal") {
            dimension = "mode"
        }
        variantFilter = Action {
            if (flavors.any { it.name == demo.name } && buildType.name == "release")
                ignore = true
        }
    }
    packagingOptions {
        resources.excludes += setOf(
            "META-INF/DEPENDENCIES",
            "META-INF/LICENSE",
            "META-INF/LICENSE.txt",
            "META-INF/LICENSE.md",
            "META-INF/LICENSE-notice.md",
            "META-INF/license.txt",
            "META-INF/NOTICE",
            "META-INF/NOTICE.txt",
            "META-INF/notice.txt",
            "META-INF/ASL2.0",
            "META-INF/*.kotlin_module",
        )
    }

    testOptions {
        emulatorControl {
            enable = true
        }
    }
    if (rootProject.plugins.hasPlugin(EmulatorPlugin::class))
        tasks.withType<DeviceProviderInstrumentTestTask>().all {
            dependsOn(":waitForEmulator")
        }
}

// Does the same than `android.kotlinOptions {}`
kotlin {
    // See https://developer.android.com/build/jdks#toolchain
    jvmToolchain(17)
    compilerOptions {
        // No need to set `jvmTarget`, it uses `jvmToolchain` by default
        freeCompilerArgs.addAll(
            "-Xexplicit-api=strict",
            "-opt-in=kotlin.RequiresOptIn",
            "-Xcontext-receivers",
        )
    }
}
