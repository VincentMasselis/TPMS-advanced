subprojects {
    // Detekt configuration
    plugins.apply 'io.gitlab.arturbosch.detekt'
    detekt {
        buildUponDefaultConfig = true
        config = files("${rootProject.rootDir}/gradle/detekt-config.yml")
    }

    // Configures every android module
    afterEvaluate {
        if (plugins.hasPlugin("com.android.application") || plugins.hasPlugin("com.android.library")) {
            plugins.apply 'kotlin-parcelize'
            android {
                compileSdk 33
                defaultConfig {
                    minSdk 27
                    targetSdk 33

                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                    if (plugins.hasPlugin("com.android.library"))
                        consumerProguardFiles "consumer-rules.pro"
                }
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_11
                    targetCompatibility JavaVersion.VERSION_11
                }
                if (plugins.hasPlugin("org.jetbrains.kotlin.android")) {
                    kotlin {
                        jvmToolchain {
                            // Prevents gradle warnings when generating kapt stubs
                            languageVersion.set(JavaLanguageVersion.of(11))
                        }
                    }
                    kotlinOptions {
                        jvmTarget = '11'
                        freeCompilerArgs += ['-Xexplicit-api=strict', '-opt-in=kotlin.RequiresOptIn']
                    }
                }
                flavorDimensions "mode"
                productFlavors {
                    demo {
                        dimension "mode"
                    }
                    normal {
                        dimension "mode"
                    }
                }
                variantFilter { variant ->
                    def names = variant.flavors*.name
                    if (names.contains("demo") && variant.buildType.name == 'release') {
                        setIgnore(true)
                    }
                }
                if (buildFeatures.compose == true) {
                    dependencies {
                        lintChecks("com.slack.lint.compose:compose-lint-checks:1.1.1")
                    }
                }
                packagingOptions {
                    exclude 'META-INF/DEPENDENCIES'
                    exclude 'META-INF/LICENSE'
                    exclude 'META-INF/LICENSE.txt'
                    exclude 'META-INF/LICENSE.md'
                    exclude 'META-INF/LICENSE-notice.md'
                    exclude 'META-INF/license.txt'
                    exclude 'META-INF/NOTICE'
                    exclude 'META-INF/NOTICE.txt'
                    exclude 'META-INF/notice.txt'
                    exclude 'META-INF/ASL2.0'
                    exclude("META-INF/*.kotlin_module")
                }
            }
        }
    }
}