subprojects {
    apply plugin: 'io.gitlab.arturbosch.detekt'
    detekt {
        buildUponDefaultConfig = true
        config = files("${rootProject.rootDir}/gradle/detekt-config.yml")
    }
    dependencies {
        detektPlugins "com.twitter.compose.rules:detekt:0.0.10"
    }
    afterEvaluate {
        if (plugins.hasPlugin("com.android.application") || plugins.hasPlugin("com.android.library")) {
            android {
                compileSdk 33
                defaultConfig {
                    minSdk 27
                    targetSdk 33

                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                    if (plugins.hasPlugin("com.android.library"))
                        consumerProguardFiles "consumer-rules.pro"
                }
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }
                if (plugins.hasPlugin("org.jetbrains.kotlin.android"))
                    kotlinOptions {
                        jvmTarget = '1.8'
                        freeCompilerArgs += ['-Xexplicit-api=strict', '-opt-in=kotlin.RequiresOptIn']
                    }
                flavorDimensions "mode"
                productFlavors {
                    demo {
                        dimension "mode"
                    }
                    normal {
                        dimension "mode"
                    }
                }
                variantFilter { variant ->
                    def names = variant.flavors*.name
                    if (names.contains("demo") && variant.buildType.name == 'release') {
                        setIgnore(true)
                    }
                }
                if (buildFeatures.compose == true) {
                    tasks.whenTaskAdded {
                        if (it.name == "compileNormalReleaseKotlin") {
                            def metricsDir = project.buildDir.absolutePath + "/compose_metrics"
                            compileNormalReleaseKotlin.kotlinOptions {
                                freeCompilerArgs += [
                                        "-P",
                                        "plugin:androidx.compose.compiler.plugins.kotlin:reportsDestination=" + metricsDir
                                ]
                                freeCompilerArgs += [
                                        "-P",
                                        "plugin:androidx.compose.compiler.plugins.kotlin:metricsDestination=" + metricsDir
                                ]
                            }
                            def outputDir = file("${project.buildDir}/compose_reports")
                            task composeReport2Html(type: JavaExec, dependsOn: compileNormalReleaseKotlin) {
                                group = 'verification'
                                inputs.dir(metricsDir)
                                outputs.dir(outputDir)
                                classpath = files("${rootProject.projectDir}/gradle/lib/composeReport2Html.jar")
                                args "-app", project.path,
                                        "-overallStatsReport", "$metricsDir/${project.name}_normalRelease-module.json",
                                        "-detailedStatsMetrics", "$metricsDir/${project.name}_normalRelease-composables.csv",
                                        "-composableMetrics", "$metricsDir/${project.name}_normalRelease-composables.txt",
                                        "-classMetrics", "$metricsDir/${project.name}_normalRelease-classes.txt",
                                        "-o", "$outputDir"
                            }
                            task exportComposeReport(type: Copy, dependsOn: composeReport2Html) {
                                group = 'verification'
                                from(outputDir) {
                                    rename 'index.html', "${project.path.replaceAll(':','_')}.html"
                                }
                                into "${rootProject.buildDir}/compose_reports"
                            }
                        }
                    }
                }
                packagingOptions {
                    exclude 'META-INF/DEPENDENCIES'
                    exclude 'META-INF/LICENSE'
                    exclude 'META-INF/LICENSE.txt'
                    exclude 'META-INF/LICENSE.md'
                    exclude 'META-INF/LICENSE-notice.md'
                    exclude 'META-INF/license.txt'
                    exclude 'META-INF/NOTICE'
                    exclude 'META-INF/NOTICE.txt'
                    exclude 'META-INF/notice.txt'
                    exclude 'META-INF/ASL2.0'
                    exclude("META-INF/*.kotlin_module")
                }
            }
        }
        if (plugins.hasPlugin("org.jetbrains.kotlin.kapt"))
            dependencies {
                implementation "com.google.dagger:dagger:$daggerVersion"
                kapt "com.google.dagger:dagger-compiler:$daggerVersion"
            }
    }
}